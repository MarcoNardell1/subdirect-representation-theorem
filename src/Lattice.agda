module Lattice where

-- Standard library imports
open import Relation.Binary.Lattice using (Lattice ; Infimum ; Supremum ; IsLattice)
open import Relation.Binary         using (Rel ; IsPartialOrder)
open import Level                   using (Level ; _‚äî_ ; suc)
open import Relation.Unary          using (Pred ; _‚äÜ_)
open import Data.Product
open import Data.Sum
open import Algebra.Core            using (Op‚ÇÇ)

-- Local imports
open import Poset                         

{-
  Lemma: 
  Let ùêã be a Complete Lattice , then ùêã is a lattice.
  Proof: 
  Let ùêã be an arbitrary complete lattice, by assumption for every X ‚äÜ L exists ‚ãÅ X and ‚ãÄ X.
  Then let X = {x , y} be a subset of L. Since X ‚äÜ L, ‚ãÅ X = sup X = sup {x, y} = x ‚à® y.
  Identically, ‚ãÄ X = inf X = inf {x , y} = x ‚àß y.
  ‚àé 
-}
 
CompleteLatticeIsLattice : ‚àÄ {c ‚Ñì‚ÇÅ ‚Ñì‚ÇÇ} ‚Üí CompleteLattice c ‚Ñì‚ÇÅ ‚Ñì‚ÇÇ ‚Ñì‚ÇÅ ‚Ñì‚ÇÅ ‚Üí Lattice c ‚Ñì‚ÇÅ ‚Ñì‚ÇÇ
CompleteLatticeIsLattice CL = record { Carrier = Carrier
                                       ; _‚âà_ = _‚âà_
                                       ; _‚â§_ = _‚â§_
                                       ; _‚à®_ = _‚à®_
                                       ; _‚àß_ = _‚àß_
                                       ; isLattice = isLattice
                                       }

  where
    open CompleteLattice CL
    
    subsetTwoElems : {x y : Carrier} ‚Üí Pred (Carrier) _   
    subsetTwoElems {x} {y} z = (x ‚âà z) ‚äé (y ‚âà z)
    
    _‚à®_ : Op‚ÇÇ (Carrier)
    _‚à®_ = Œª x y ‚Üí ‚ãÅ (subsetTwoElems {x} {y})

    _‚àß_ : Op‚ÇÇ (Carrier)
    _‚àß_ = Œª x y ‚Üí ‚ãÄ (subsetTwoElems {x} {y})

    supTwoElems : {x y : Carrier} ‚Üí IsSupremum _‚â§_ subsetTwoElems (‚ãÅ subsetTwoElems)
    supTwoElems {x} {y} = isSupremum isCompleteLattice (subsetTwoElems {x} {y})

    infTwoElems : {x y : Carrier} ‚Üí IsInfimum _‚â§_ subsetTwoElems (‚ãÄ subsetTwoElems)
    infTwoElems {x} {y} = isInfimum isCompleteLattice (subsetTwoElems {x} {y})

    eqReflPoset = (IsPartialOrder.Eq.refl (isPartialOrder isCompleteLattice))
    
    x‚â§x‚à®y :{x y : Carrier} ‚Üí  x ‚â§ (x ‚à® y)
    x‚â§x‚à®y {x} {y} =  (proj‚ÇÅ (supTwoElems {x} {y})) x (inj‚ÇÅ eqReflPoset)

    y‚â§x‚à®y : {x y : Carrier} ‚Üí y ‚â§ (x ‚à® y)
    y‚â§x‚à®y {x} {y} = (proj‚ÇÅ (supTwoElems {x} {y})) y (inj‚ÇÇ eqReflPoset)

    lUpperbound : {x y : Carrier} (z : Carrier) ‚Üí x ‚â§ z ‚Üí y ‚â§ z
                      ‚Üí IsUpperBound _‚â§_ (subsetTwoElems {x} {y}) z
    lUpperbound {x} {y} z x‚â§z y‚â§z = {!!} 
                    
 
    supIsLeastUpperBound : {x y : Carrier} (z : Carrier) ‚Üí x ‚â§ z ‚Üí y ‚â§ z ‚Üí (x ‚à® y) ‚â§ z
    supIsLeastUpperBound {x} {y} z x‚â§z y‚â§z = proj‚ÇÇ (supTwoElems {x} {y}) z
                                                   (lUpperbound {x} {y} z x‚â§z y‚â§z) 

    sup : Supremum (_‚â§_) _‚à®_
    sup x y = x‚â§x‚à®y {x} {y}  , y‚â§x‚à®y {x} {y} , Œª z ‚Üí supIsLeastUpperBound {x} {y} z

    inf : Infimum (_‚â§_) _‚àß_
    inf x y = {!!} , {!!} , {!!}

    isLattice : IsLattice (_‚âà_) (_‚â§_) (_‚à®_) (_‚àß_)
    isLattice = record { isPartialOrder = isPartialOrder (isCompleteLattice)
                       ; supremum = sup
                       ; infimum = inf
                       } 


-- Meet-irreducible elements
{-
  Let ùêã be a complete lattice.
  An element a is called meet-irreducible if a = b ‚àß c implies a = b or a = c.
  The element a is completely meet-irreducible if a ‚â† 1_ùêã and whenever a = ‚ãÄ_{i ‚àà I} b·µ¢,
  there is a j ‚àà I such that a = b‚±º.  
-}
