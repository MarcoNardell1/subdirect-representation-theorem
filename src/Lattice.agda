module Lattice where

-- Standard library imports
open import Relation.Binary.Lattice using (Lattice ; Infimum ; Supremum ; IsLattice)
open import Relation.Binary         using (Rel ; IsPartialOrder)
open import Level                   using (Level ; _‚äî_ ; suc)
open import Relation.Unary          using (Pred ; _‚äÜ_ ; _‚àà_)
open import Relation.Nullary        using (¬¨_)
open import Data.Product
open import Data.Sum
open import Data.Empty
open import Algebra.Core            using (Op‚ÇÇ)

-- Local imports
open import Poset                         

{-
  Lemma: 
  Let ùêã be a Complete Lattice , then ùêã is a lattice.
  Proof: 
  Let ùêã be an arbitrary complete lattice, by assumption for every X ‚äÜ L exists ‚ãÅ X and ‚ãÄ X.
  Then let X = {x , y} be a subset of L. Since X ‚äÜ L, ‚ãÅ X = sup X = sup {x, y} = x ‚à® y.
  Identically, ‚ãÄ X = inf X = inf {x , y} = x ‚àß y.
  ‚àé 
-}
 
CompleteLatticeIsLattice : ‚àÄ {c ‚Ñì‚ÇÅ ‚Ñì‚ÇÇ} ‚Üí CompleteLattice c ‚Ñì‚ÇÅ ‚Ñì‚ÇÇ ‚Ñì‚ÇÅ ‚Ñì‚ÇÅ ‚Üí Lattice c ‚Ñì‚ÇÅ ‚Ñì‚ÇÇ
CompleteLatticeIsLattice CL = record { Carrier = Carrier
                                       ; _‚âà_ = _‚âà_
                                       ; _‚â§_ = _‚â§_
                                       ; _‚à®_ = _‚à®_
                                       ; _‚àß_ = _‚àß_
                                       ; isLattice = isLattice
                                       }

  where
    open CompleteLattice CL
    -- utils
    subsetTwoElems : {x y : Carrier} ‚Üí Pred (Carrier) _   
    subsetTwoElems {x} {y} z = (x ‚âà z) ‚äé (y ‚âà z)

    eqReflPoset = (IsPartialOrder.Eq.refl (isPartialOrder isCompleteLattice))
   
    -- binary operations
    _‚à®_ : Op‚ÇÇ (Carrier)
    _‚à®_ = Œª x y ‚Üí ‚ãÅ (subsetTwoElems {x} {y})

    _‚àß_ : Op‚ÇÇ (Carrier)
    _‚àß_ = Œª x y ‚Üí ‚ãÄ (subsetTwoElems {x} {y})

    -- proof of _‚à®_ is supremum
    supTwoElems : {x y : Carrier} ‚Üí IsSupremum _‚â§_ subsetTwoElems (‚ãÅ subsetTwoElems)
    supTwoElems {x} {y} = isSupremum isCompleteLattice (subsetTwoElems {x} {y})
 
    x‚â§x‚à®y :{x y : Carrier} ‚Üí  x ‚â§ (x ‚à® y)
    x‚â§x‚à®y {x} {y} =  (proj‚ÇÅ (supTwoElems {x} {y})) x (inj‚ÇÅ eqReflPoset)

    y‚â§x‚à®y : {x y : Carrier} ‚Üí y ‚â§ (x ‚à® y)
    y‚â§x‚à®y {x} {y} = (proj‚ÇÅ (supTwoElems {x} {y})) y (inj‚ÇÇ eqReflPoset)

    lUpperbound : {x y : Carrier} (z : Carrier) ‚Üí x ‚â§ z ‚Üí y ‚â§ z
                ‚Üí IsUpperBound _‚â§_ (subsetTwoElems {x} {y}) z
    lUpperbound {x} {y} z x‚â§z y‚â§z _ (inj‚ÇÅ x‚ÇÅ) = IsPartialOrder.‚â§-respÀ°-‚âà
                                                (isPartialOrder isCompleteLattice)
                                                x‚ÇÅ
                                                x‚â§z
    lUpperbound {x} {y} z x‚â§z y‚â§z _ (inj‚ÇÇ y‚ÇÅ) = IsPartialOrder.‚â§-respÀ°-‚âà
                                                (isPartialOrder isCompleteLattice)
                                                y‚ÇÅ
                                                y‚â§z
                    
    supIsLeastUpperBound : {x y : Carrier} (z : Carrier)
                         ‚Üí x ‚â§ z ‚Üí y ‚â§ z ‚Üí (x ‚à® y) ‚â§ z
    supIsLeastUpperBound {x} {y} z x‚â§z y‚â§z = proj‚ÇÇ (supTwoElems {x} {y})
                                                   z
                                                   (lUpperbound {x} {y} z x‚â§z y‚â§z) 

    sup : Supremum (_‚â§_) _‚à®_
    sup x y = x‚â§x‚à®y {x} {y}  , y‚â§x‚à®y {x} {y} , Œª z ‚Üí supIsLeastUpperBound {x} {y} z

    -- proof of _‚àß_ is infimum
    infTwoElems : {x y : Carrier} ‚Üí IsInfimum _‚â§_ subsetTwoElems (‚ãÄ subsetTwoElems)
    infTwoElems {x} {y} = isInfimum isCompleteLattice (subsetTwoElems {x} {y})

    x‚àßy‚â§x : {x y : Carrier} ‚Üí (x ‚àß y) ‚â§ x
    x‚àßy‚â§x {x} {y} = proj‚ÇÅ (infTwoElems {x} {y}) x (inj‚ÇÅ eqReflPoset)

    x‚àßy‚â§y : {x y : Carrier} ‚Üí (x ‚àß y) ‚â§ y
    x‚àßy‚â§y {x} {y} = proj‚ÇÅ (infTwoElems {x} {y}) y (inj‚ÇÇ eqReflPoset)

    gUpperbound : {x y : Carrier} (z : Carrier) ‚Üí z ‚â§ x ‚Üí z ‚â§ y
                ‚Üí IsLowerBound _‚â§_ (subsetTwoElems {x} {y}) z
    gUpperbound {x} {y} z z‚â§x z‚â§y _ (inj‚ÇÅ x‚ÇÅ) = IsPartialOrder.‚â§-resp ≥-‚âà
                                                 (isPartialOrder isCompleteLattice)
                                                 x‚ÇÅ
                                                 z‚â§x
    gUpperbound {x} {y} z z‚â§x z‚â§y _ (inj‚ÇÇ y‚ÇÅ) = IsPartialOrder.‚â§-resp ≥-‚âà
                                                (isPartialOrder isCompleteLattice)
                                                y‚ÇÅ
                                                z‚â§y
    
    infIsGreatestLowerbound : {x y : Carrier} (z : Carrier) ‚Üí z ‚â§ x ‚Üí z ‚â§ y ‚Üí z ‚â§ (x ‚àß y)
    infIsGreatestLowerbound {x} {y} z z‚â§x z‚â§y = proj‚ÇÇ (infTwoElems {x} {y})
                                                      z
                                                      (gUpperbound {x} {y} z z‚â§x z‚â§y)
    
    inf : Infimum (_‚â§_) _‚àß_
    inf x y = x‚àßy‚â§x , x‚àßy‚â§y , Œª z ‚Üí infIsGreatestLowerbound {x} {y} z  

    isLattice : IsLattice (_‚âà_) (_‚â§_) (_‚à®_) (_‚àß_)
    isLattice = record { isPartialOrder = isPartialOrder (isCompleteLattice)
                       ; supremum = sup
                       ; infimum = inf
                       } 

-- Meet-irreducible elements
{-
  Let ùêã be a complete lattice.
  An element a is called meet-irreducible if a = b ‚àß c implies a = b or a = c.
  The element a is completely meet-irreducible if a ‚â† 1_ùêã and whenever a = ‚ãÄ_{i ‚àà I} b·µ¢,
  there is a j ‚àà I such that a = b‚±º.  
-}


postulate
  absurd : ‚àÄ {‚Ñì} (P : Set ‚Ñì) ‚Üí ¬¨(¬¨ P) ‚Üí P


{-
  TODO: 
  - Asumiendo prueba por absurdo, formalizar 3.22
-}

module MeetIrreducible {c ‚Ñì‚ÇÅ} {CL : CompleteLattice c ‚Ñì‚ÇÅ ‚Ñì‚ÇÅ ‚Ñì‚ÇÅ ‚Ñì‚ÇÅ} where
  open CompleteLattice CL

  L : Lattice c ‚Ñì‚ÇÅ ‚Ñì‚ÇÅ
  L = CompleteLatticeIsLattice CL
  open Lattice L renaming ( Carrier to A
                          ; _‚âà_ to _‚âàl_
                          ; _‚â§_ to _‚â§l_
                          )

  -- Check if an element is meet-irreducible
  IsMI : Pred A _
  IsMI x = ‚àÄ b c ‚Üí x ‚âàl (b ‚àß c) ‚Üí (x ‚âàl b) ‚äé (x ‚âàl c)

  -- check if an element is completely meet-irreducible
  IsCMI : Pred A _
  IsCMI x = ¬¨ (x ‚âà (1L CL)) √ó (‚àÄ P ‚Üí (‚ãÄ P) ‚âà x ‚Üí P x)

  _<CL_ : Rel A _
  a <CL b = a ‚â§ b √ó ¬¨ (a ‚âà b) 
  
  -- enunciando el lema 3.22
  CMI‚ÜíCover : (a : A) ‚Üí IsCMI a ‚Üí ‚àÉ[ c ] ((a <CL c) √ó (‚àÄ (x : A) ‚Üí a <CL x ‚Üí c ‚â§ x))
  CMI‚ÜíCover a p = c' , absurd (a <CL c') (‚ä•-elim {! !}) , Œª x x‚ÇÅ ‚Üí {!!}
    where
 
      X : Pred Carrier ‚Ñì‚ÇÅ
      X = Œª x ‚Üí a <CL x
      
      c' : A
      c' = ‚ãÄ X
      
  cover‚ÜíCMI : (a : A) ‚Üí ‚àÉ[ c ] ((a <CL c) √ó (‚àÄ (x : A) ‚Üí a <CL x ‚Üí c ‚â§ x)) ‚Üí IsCMI a
  cover‚ÜíCMI a c' = absurd {!!} {!!}
    where

      X : Pred Carrier ‚Ñì‚ÇÅ
      X = Œª x ‚Üí a <CL x

open MeetIrreducible
