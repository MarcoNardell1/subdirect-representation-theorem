module Lattice where

-- Standard library imports
open import Relation.Binary.Lattice using (Lattice ; Infimum ; Supremum ; IsLattice)
open import Relation.Binary         using (Rel ; IsPartialOrder ; Poset ; IsPreorder ; IsEquivalence)
open import Level                   using (Level ; _‚äî_ ; suc)
open import Relation.Unary          using (Pred)
open import Relation.Nullary        using (¬¨_)
open import Data.Product
open import Data.Sum
open import Data.Empty
open import Data.Unit.Polymorphic using (‚ä§)
open import Agda.Builtin.Unit       using (tt) 
open import Algebra.Core            using (Op‚ÇÇ)

-- Local imports
open import Poset
open import Utils.Axioms using (absurd)

{-
  Lemma: 
  Let ùêã be a Complete Lattice , then ùêã is a lattice.
  Proof: 
  Let ùêã be an arbitrary complete lattice, by assumption for every X ‚äÜ L exists ‚ãÅ X and ‚ãÄ X.
  Then let X = {x , y} be a subset of L. Since X ‚äÜ L, ‚ãÅ X = sup X = sup {x, y} = x ‚à® y.
  Identically, ‚ãÄ X = inf X = inf {x , y} = x ‚àß y.
  ‚àé 
-}
 
CompleteLatticeIsLattice : ‚àÄ {c ‚Ñì‚ÇÅ ‚Ñì‚ÇÇ}
                         ‚Üí CompleteLattice c ‚Ñì‚ÇÅ ‚Ñì‚ÇÇ ‚Ñì‚ÇÅ ‚Ñì‚ÇÅ
                         ‚Üí Lattice c ‚Ñì‚ÇÅ ‚Ñì‚ÇÇ
CompleteLatticeIsLattice CL = record { Carrier = Carrier
                                       ; _‚âà_ = _‚âà_
                                       ; _‚â§_ = _‚â§_
                                       ; _‚à®_ = _‚à®_
                                       ; _‚àß_ = _‚àß_
                                       ; isLattice = isLattice
                                       }

  where
    open CompleteLattice CL
    -- utils
    subsetTwoElems : {x y : Carrier} ‚Üí Pred (Carrier) _   
    subsetTwoElems {x} {y} z = (x ‚âà z) ‚äé (y ‚âà z)

    eqReflPoset = IsPartialOrder.Eq.refl
                  (isPartialOrder isCompleteLattice)
   
    -- binary operations
    _‚à®_ : Op‚ÇÇ (Carrier)
    _‚à®_ = Œª x y ‚Üí ‚ãÅ (subsetTwoElems {x} {y})

    _‚àß_ : Op‚ÇÇ (Carrier)
    _‚àß_ = Œª x y ‚Üí ‚ãÄ (subsetTwoElems {x} {y})

    -- proof of _‚à®_ is supremum
    supTwoElems : {x y : Carrier}
                ‚Üí IsSupremum _‚â§_ subsetTwoElems (‚ãÅ subsetTwoElems)
    supTwoElems {x} {y} = isSupremum isCompleteLattice
                                     (subsetTwoElems {x} {y})
 
    x‚â§x‚à®y :{x y : Carrier} ‚Üí  x ‚â§ (x ‚à® y)
    x‚â§x‚à®y {x} {y} =  (proj‚ÇÅ (supTwoElems {x} {y})) x (inj‚ÇÅ eqReflPoset)

    y‚â§x‚à®y : {x y : Carrier} ‚Üí y ‚â§ (x ‚à® y)
    y‚â§x‚à®y {x} {y} = (proj‚ÇÅ (supTwoElems {x} {y})) y (inj‚ÇÇ eqReflPoset)

    lUpperbound : {x y : Carrier} (z : Carrier)
                ‚Üí x ‚â§ z
                ‚Üí y ‚â§ z
                ‚Üí IsUpperBound _‚â§_ (subsetTwoElems {x} {y}) z
    lUpperbound {x} {y} z x‚â§z y‚â§z _ (inj‚ÇÅ x‚ÇÅ) = IsPartialOrder.‚â§-respÀ°-‚âà
                                                (isPartialOrder isCompleteLattice)
                                                x‚ÇÅ
                                                x‚â§z
    lUpperbound {x} {y} z x‚â§z y‚â§z _ (inj‚ÇÇ y‚ÇÅ) = IsPartialOrder.‚â§-respÀ°-‚âà
                                                (isPartialOrder isCompleteLattice)
                                                y‚ÇÅ
                                                y‚â§z
                    
    supIsLeastUpperBound : {x y : Carrier} (z : Carrier)
                         ‚Üí x ‚â§ z
                         ‚Üí y ‚â§ z
                         ‚Üí (x ‚à® y) ‚â§ z
    supIsLeastUpperBound {x} {y} z x‚â§z y‚â§z = proj‚ÇÇ (supTwoElems {x} {y})
                                                   z
                                                   (lUpperbound {x} {y} z x‚â§z y‚â§z) 

    sup : Supremum (_‚â§_) _‚à®_
    sup x y = x‚â§x‚à®y {x} {y}
            , y‚â§x‚à®y {x} {y}
            , Œª z ‚Üí supIsLeastUpperBound {x} {y} z

    -- proof of _‚àß_ is infimum
    infTwoElems : {x y : Carrier}
                ‚Üí IsInfimum _‚â§_ subsetTwoElems (‚ãÄ subsetTwoElems)
    infTwoElems {x} {y} = isInfimum isCompleteLattice
                                    (subsetTwoElems {x} {y})

    x‚àßy‚â§x : {x y : Carrier} ‚Üí (x ‚àß y) ‚â§ x
    x‚àßy‚â§x {x} {y} = proj‚ÇÅ (infTwoElems {x} {y}) x (inj‚ÇÅ eqReflPoset)

    x‚àßy‚â§y : {x y : Carrier} ‚Üí (x ‚àß y) ‚â§ y
    x‚àßy‚â§y {x} {y} = proj‚ÇÅ (infTwoElems {x} {y}) y (inj‚ÇÇ eqReflPoset)

    gUpperbound : {x y : Carrier} (z : Carrier)
                ‚Üí z ‚â§ x
                ‚Üí z ‚â§ y
                ‚Üí IsLowerBound _‚â§_ (subsetTwoElems {x} {y}) z
    gUpperbound {x} {y} z z‚â§x z‚â§y _ (inj‚ÇÅ x‚ÇÅ) = IsPartialOrder.‚â§-resp ≥-‚âà
                                                 (isPartialOrder isCompleteLattice)
                                                 x‚ÇÅ
                                                 z‚â§x
    gUpperbound {x} {y} z z‚â§x z‚â§y _ (inj‚ÇÇ y‚ÇÅ) = IsPartialOrder.‚â§-resp ≥-‚âà
                                                (isPartialOrder isCompleteLattice)
                                                y‚ÇÅ
                                                z‚â§y
    
    infIsGreatestLowerbound : {x y : Carrier} (z : Carrier)
                            ‚Üí z ‚â§ x
                            ‚Üí z ‚â§ y
                            ‚Üí z ‚â§ (x ‚àß y)
    infIsGreatestLowerbound {x} {y} z z‚â§x z‚â§y = proj‚ÇÇ (infTwoElems {x} {y})
                                                      z
                                                      (gUpperbound {x}
                                                                   {y}
                                                                   z
                                                                   z‚â§x
                                                                   z‚â§y
                                                       )
    
    inf : Infimum (_‚â§_) _‚àß_
    inf x y = x‚àßy‚â§x
            , x‚àßy‚â§y
            , Œª z ‚Üí infIsGreatestLowerbound {x} {y} z  

    isLattice : IsLattice (_‚âà_) (_‚â§_) (_‚à®_) (_‚àß_)
    isLattice = record { isPartialOrder = isPartialOrder (isCompleteLattice)
                       ; supremum = sup
                       ; infimum = inf
                       } 

-- Meet-irreducible elements
{-
  Let ùêã be a complete lattice.
  An element a is called meet-irreducible if a = b ‚àß c implies a = b or a = c.
  The element a is completely meet-irreducible if a ‚â† 1_ùêã and whenever a = ‚ãÄ_{i ‚àà I} b·µ¢,
  there is a j ‚àà I such that a = b‚±º.  
-}

module MeetIrreducible {c ‚Ñì‚ÇÅ} {CL : CompleteLattice c ‚Ñì‚ÇÅ ‚Ñì‚ÇÅ ‚Ñì‚ÇÅ ‚Ñì‚ÇÅ} where
  open CompleteLattice CL

  ùêã : Lattice c ‚Ñì‚ÇÅ ‚Ñì‚ÇÅ
  ùêã = CompleteLatticeIsLattice CL
  open Lattice ùêã renaming ( Carrier to A
                          ; _‚âà_ to _‚âàl_
                          ; _‚â§_ to _‚â§l_
                          )

  -- Check if an element is meet-irreducible
  IsMI : Pred Carrier _
  IsMI x = ‚àÄ b c ‚Üí x ‚âàl (b ‚àß c) ‚Üí (x ‚âàl b) ‚äé (x ‚âàl c)

  -- check if an element is completely meet-irreducible
  ‚âà-closed : ‚àÄ {‚Ñì} (P : Pred Carrier ‚Ñì) ‚Üí Set (c ‚äî ‚Ñì‚ÇÅ ‚äî ‚Ñì)
  ‚âà-closed P = ‚àÄ x y ‚Üí P x ‚Üí x ‚âà y ‚Üí P y
  
  IsCMI : Pred Carrier _
  IsCMI x = ¬¨ (x ‚âà (1L CL)) √ó (‚àÄ P ‚Üí ‚âà-closed P ‚Üí (‚ãÄ P) ‚âà x ‚Üí P x)

-- Some strict order properties 
  _<CL_ : Rel Carrier _
  a <CL b = a ‚â§ b √ó ¬¨ (a ‚âà b)

  <CL-trans :  ‚àÄ (x y z : Carrier) ‚Üí (x <CL y) √ó (y ‚â§ z) ‚Üí x <CL z
  <CL-trans x y z ((x‚â§y , ¬¨x‚âày) , y‚â§z) = CL.trans x‚â§y y‚â§z , ¬¨x‚âàz x‚â§y y‚â§z ¬¨x‚âày
    where
      ¬¨x‚âàz : x ‚â§ y ‚Üí y ‚â§ z ‚Üí ¬¨ (x ‚âà y) ‚Üí ¬¨ (x ‚âà z)
      ¬¨x‚âàz x‚â§y y‚â§z ¬¨x‚âày = Œª x‚ÇÅ ‚Üí ¬¨x‚âày (CL.antisym x‚â§y (‚â§-eq  y‚â§z (CL.Eq.sym x‚ÇÅ)))   

  <CL-eq : ‚àÄ (x y z : Carrier) ‚Üí x <CL y ‚Üí y ‚âà z ‚Üí x <CL z
  <CL-eq x y z (x‚â§y , ¬¨x‚âày) y‚âàz = ‚â§-eq x‚â§y y‚âàz , ¬¨‚âà-trans ¬¨x‚âày y‚âàz
  
  <CL-irr : ‚àÄ (x : Carrier) ‚Üí x <CL x ‚Üí ‚ä•
  <CL-irr x (_ , x‚â†x) = x‚â†x CL.Eq.refl
  
  1L‚â§-refl : ‚àÄ (x : Carrier) ‚Üí 1L CL ‚â§ x ‚Üí 1L CL ‚âà x
  1L‚â§-refl x 1‚â§x = CL.Eq.trans 1‚âà‚ãÅ (‚ãÅ‚âàx xIsSup) 
    where
      all : Pred Carrier ‚Ñì‚ÇÅ
      all = Œª x ‚Üí ‚ä§

      y‚ààall : ‚àÄ (y : Carrier) ‚Üí all y
      y‚ààall y = Level.lift Agda.Builtin.Unit.tt
      
      1‚âà‚ãÅ : (1L CL) ‚âà (‚ãÅ all)
      1‚âà‚ãÅ = CL.Eq.refl
      
      y‚â§1 : ‚àÄ (y : Carrier) ‚Üí y ‚â§ 1L CL
      y‚â§1 y =
        proj‚ÇÅ
          (isSupremum isCompleteLattice all)
          y
          (y‚ààall y)
      
      xIsSup : IsSupremum _‚â§_ all x 
      xIsSup = (Œª y y‚ààL ‚Üí CL.trans (y‚â§1 y) 1‚â§x)
             , Œª z zIsUpper ‚Üí zIsUpper x (Level.lift tt)

      sup-refl : ‚àÄ (X : Pred Carrier ‚Ñì‚ÇÅ) {x y : Carrier}
               ‚Üí IsSupremum _‚â§_ X x
               ‚Üí IsSupremum _‚â§_ X y ‚Üí x ‚âà y
      sup-refl X {x} {y} (xUB , xisLUB) (yUB , yisLUB) =
        CL.antisym
          (xisLUB y yUB)
          (yisLUB x xUB)
      
      ‚ãÅ‚âàx : IsSupremum _‚â§_ all x ‚Üí (‚ãÅ all) ‚âà x
      ‚ãÅ‚âàx xIsSup =
        sup-refl
          all
          (isSupremum isCompleteLattice all)
          xIsSup
      
  <CL-not1 : ‚àÄ (x y : Carrier) ‚Üí x <CL y ‚Üí ¬¨ (x ‚âà 1L CL)
  <CL-not1 x y x<y = Œª x‚âà1 ‚Üí 1L<y (<CL-eqÀ° x<y x‚âà1)
    where
      <CL-eqÀ° : x <CL y ‚Üí x ‚âà 1L CL ‚Üí 1L CL <CL y
      <CL-eqÀ° (x‚â§y , ¬¨x‚âày) x‚âà1 = ‚â§-eqÀ° x‚â§y x‚âà1
                               , ¬¨‚âà-transÀ° ¬¨x‚âày x‚âà1
      
      1L<y : (1L CL) <CL y ‚Üí ‚ä•
      1L<y (1‚â§y , ¬¨1‚âày) = ¬¨1‚âày (1L‚â§-refl y 1‚â§y)
  
  -- Lemma
  {-
  Suppose that a is an element of a Complete Lattice ùêã. The following are equivalent
  (a) a is completely meet irreducible

  (b) There is an element c ‚àà L such that a < c and for every x ‚àà L, a < x implies that c ‚â§ x. 
  -}
  CMI‚ÜíCover : (a : Carrier)
            ‚Üí IsCMI a
            ‚Üí ‚àÉ[ c ] ((a <CL c) √ó (‚àÄ (x : A) ‚Üí a <CL x ‚Üí c ‚â§ x))
  CMI‚ÜíCover a p = c' , (LB‚â§‚ãÄ X a aIsLowerBound , abs) , meetL X
    where
    
      X : Pred Carrier ‚Ñì‚ÇÅ
      X = Œª x ‚Üí a <CL x

      XisClosed : ‚âà-closed X
      XisClosed = Œª x y Xx x‚âày ‚Üí <CL-eq a x y Xx x‚âày
      
      c' : A
      c' = ‚ãÄ X

      aIsLowerBound : IsLowerBound _‚â§_ X a
      aIsLowerBound y a‚â§y = proj‚ÇÅ a‚â§y

      abs : a ‚âà c' ‚Üí ‚ä•
      abs a=c' = <CL-irr a a<a
        where
          a<a : a <CL a
          a<a = proj‚ÇÇ p X XisClosed (CL.Eq.sym a=c')
    
  cover‚ÜíCMI : (a : Carrier)
            ‚Üí ‚àÉ[ c ] ((a <CL c) √ó (‚àÄ (x : A) ‚Üí a <CL x ‚Üí c ‚â§ x))  ‚Üí IsCMI a
  cover‚ÜíCMI a (c' , (a<c , p)) = <CL-not1 a c' a<c
                               , Œª P PisClosed inf‚âàa
                                   ‚Üí absurd (P a) (Œª a‚àâP
                                                     ‚Üí <CL-irr a
                                                              (a<a P
                                                                   PisClosed
                                                                   (CL.Eq.sym inf‚âàa
                                                                    , a‚àâP
                                                                    )
                                                                )
                                                    )
    where

      a<x : ‚àÄ (X : Pred Carrier ‚Ñì‚ÇÅ) (x : Carrier)
          ‚Üí ‚âà-closed X
          ‚Üí a ‚âà (‚ãÄ X) √ó ¬¨ (X a)
          ‚Üí X x ‚Üí a ‚â§ x
          ‚Üí a <CL x
      a<x X x XClosed (a‚âàinf , a‚àâX) x‚ààX a‚â§x = a‚â§x , Œª a‚âàx ‚Üí a‚àâX (a‚ààX x‚ààX a‚âàx)
        where
          a‚ààX : X x ‚Üí a ‚âà x ‚Üí X a
          a‚ààX x‚ààX a‚âàx = XClosed x a x‚ààX (CL.Eq.sym a‚âàx)

      c‚â§inf : ‚àÄ (X : Pred Carrier ‚Ñì‚ÇÅ)
            ‚Üí ‚âà-closed X
            ‚Üí a ‚âà (‚ãÄ X) √ó ¬¨ (X a)
            ‚Üí c' ‚â§ (‚ãÄ X)
      c‚â§inf X XClosed (a‚âàinf , a‚àâX) = LB‚â§‚ãÄ X c' cIsLowerBound
        where
          cIsLowerBound : IsLowerBound _‚â§_ X c'
          cIsLowerBound y y‚ààX = p y (a<x X
                                         y
                                         XClosed
                                         (a‚âàinf , a‚àâX)
                                         y‚ààX
                                         (‚â§-eqÀ° (meetL X y y‚ààX) (CL.Eq.sym a‚âàinf))
                                     )

      a<a : ‚àÄ (X : Pred Carrier ‚Ñì‚ÇÅ)
          ‚Üí  ‚âà-closed X
          ‚Üí a ‚âà (‚ãÄ X) √ó ¬¨ (X a)
          ‚Üí a <CL a
      a<a X XClosed p = <CL-trans a
                                  c'
                                  a
                                  (a<c , ‚â§-eq (c‚â§inf X XClosed p)
                                  (CL.Eq.sym (proj‚ÇÅ p)))
      
-- open MeetIrreducible

{- Proving that an Interval of a Lattice ùêã is a sublattice of ùêã -}

module _ {c ‚Ñì‚ÇÅ ‚Ñì‚ÇÇ} (ùêã : Lattice c ‚Ñì‚ÇÅ ‚Ñì‚ÇÇ) where
  open Lattice ùêã renaming ( Carrier to L
                          ; isPartialOrder to PO
                          ; _‚âà_ to _‚âàl_
                          ; _‚â§_ to _‚â§l_
                          )

  open IsPartialOrder PO renaming ( trans to ltrans
                                  ; antisym to lantisym
                                  ; reflexive to lreflexive
                                  ; isPreorder to prO
                                  ; isEquivalence to equiv
                                  )

  open IsEquivalence equiv renaming ( refl to eqrefl
                                    ; sym to eqsym
                                    ; trans to eqtrans
                                    )
  
  LisPoset : Poset c ‚Ñì‚ÇÅ ‚Ñì‚ÇÇ
  LisPoset = record { Carrier =  L
                    ; _‚âà_ = _‚âàl_
                    ; _‚â§_ = _‚â§l_
                    ; isPartialOrder = PO
                    }

  IntervalIsLattice : ‚àÄ (a b : L) ‚Üí Lattice (c ‚äî ‚Ñì‚ÇÇ) ‚Ñì‚ÇÅ _
  IntervalIsLattice a b = record
                           { Carrier = Car
                           ; _‚âà_ = _‚âà·µ¢_
                           ; _‚â§_ = _‚â§·µ¢_
                           ; _‚à®_ = _‚à®·µ¢_
                           ; _‚àß_ = _‚àß·µ¢_
                           ; isLattice = intervalIsLattice
                           }
   where
     Car : Set (c ‚äî ‚Ñì‚ÇÇ)
     Car = Œ£[ y ‚àà L ] (ùêà[ LisPoset ][ a , b ] y)  

     _‚âà·µ¢_ : Rel Car ‚Ñì‚ÇÅ
     x ‚âà·µ¢ y = (proj‚ÇÅ x) ‚âàl (proj‚ÇÅ y)

     _‚â§·µ¢_ : Rel Car ‚Ñì‚ÇÇ
     x ‚â§·µ¢ y = (proj‚ÇÅ x) ‚â§l (proj‚ÇÅ y)

     _‚à®·µ¢_ : Op‚ÇÇ Car
     x ‚à®·µ¢ y = z , z‚ààùêà
       where
         z : L
         z = (proj‚ÇÅ x) ‚à® (proj‚ÇÅ y)

         z‚ààùêà : ùêà[ LisPoset ][ a , b ] z
         z‚ààùêà = ltrans (proj‚ÇÅ (proj‚ÇÇ x)) (proj‚ÇÅ (supremum (proj‚ÇÅ x) (proj‚ÇÅ y)))
             , proj‚ÇÇ (proj‚ÇÇ (supremum (proj‚ÇÅ x) (proj‚ÇÅ y))) b (proj‚ÇÇ (proj‚ÇÇ x)) (proj‚ÇÇ (proj‚ÇÇ y))

     _‚àß·µ¢_ : Op‚ÇÇ Car
     x ‚àß·µ¢ y = z , z‚ààùêà
       where
         z : L
         z = (proj‚ÇÅ x) ‚àß (proj‚ÇÅ y)

         z‚ààùêà : ùêà[ LisPoset ][ a , b ] z
         z‚ààùêà = (proj‚ÇÇ (proj‚ÇÇ (infimum (proj‚ÇÅ x) (proj‚ÇÅ y))) a (proj‚ÇÅ (proj‚ÇÇ x)) (proj‚ÇÅ (proj‚ÇÇ y)))
             , ltrans (proj‚ÇÅ (infimum (proj‚ÇÅ x) (proj‚ÇÅ y))) (proj‚ÇÇ (proj‚ÇÇ x))

     ‚âà-isEquiv : IsEquivalence _‚âà·µ¢_
     ‚âà-isEquiv = record { refl = eqrefl
                        ; sym = Œª x‚âày ‚Üí eqsym x‚âày
                        ; trans = Œª x‚âày y‚âàz ‚Üí eqtrans x‚âày y‚âàz
                        }

     intervalPreorder : IsPreorder _‚âà·µ¢_ _‚â§·µ¢_ 
     intervalPreorder = record { isEquivalence = ‚âà-isEquiv
                               ; reflexive = Œª x‚âày ‚Üí lreflexive x‚âày
                               ; trans = Œª x‚â§y y‚â§z  ‚Üí ltrans x‚â§y y‚â§z
                               }
     
     intervalPartialOrder : IsPartialOrder _‚âà·µ¢_ _‚â§·µ¢_
     intervalPartialOrder = record { isPreorder = intervalPreorder
                                   ; antisym = Œª x y ‚Üí lantisym x y
                                   }
     ‚à®-isSup : Supremum _‚â§·µ¢_ _‚à®·µ¢_
     ‚à®-isSup x y = proj‚ÇÅ (supremum (proj‚ÇÅ x) (proj‚ÇÅ y))
               , proj‚ÇÅ (proj‚ÇÇ (supremum (proj‚ÇÅ x) (proj‚ÇÅ y)))
               , Œª z x‚â§z y‚â§z ‚Üí proj‚ÇÇ (proj‚ÇÇ (supremum (proj‚ÇÅ x) (proj‚ÇÅ y))) (proj‚ÇÅ z) x‚â§z y‚â§z

     ‚àß-isInf : Infimum _‚â§·µ¢_ _‚àß·µ¢_
     ‚àß-isInf x y = proj‚ÇÅ (infimum (proj‚ÇÅ x) (proj‚ÇÅ y))
                 , (proj‚ÇÅ (proj‚ÇÇ (infimum (proj‚ÇÅ x) (proj‚ÇÅ y))))
                 , Œª z z‚â§x z‚â§y ‚Üí proj‚ÇÇ (proj‚ÇÇ (infimum (proj‚ÇÅ x) (proj‚ÇÅ y))) (proj‚ÇÅ z) z‚â§x z‚â§y
     
     intervalIsLattice : IsLattice _‚âà·µ¢_ _‚â§·µ¢_ _‚à®·µ¢_ _‚àß·µ¢_
     intervalIsLattice = record { isPartialOrder = intervalPartialOrder
                                ; supremum = ‚à®-isSup
                                ; infimum = ‚àß-isInf
                                }
